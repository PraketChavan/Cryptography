package uk.ac.nottingham.cryptography.asymmetric;

import org.junit.jupiter.api.Test;
import uk.ac.nottingham.cryptography.asymmetric.padding.PKCSv15;

import static org.junit.jupiter.api.Assertions.*;

import java.math.BigInteger;

public class PaddingTests {
    @Test
    void paddingTest() {
        BigInteger inputA = PKCSv15.pad(BigInteger.ONE, 1024);
        BigInteger inputB = PKCSv15.pad(BigInteger.TEN, 2048);
        BigInteger inputC = PKCSv15.pad(BigInteger.valueOf(3077L), 2048);
        BigInteger inputD = PKCSv15.pad(BigInteger.valueOf(314159265358979L), 4096);

        // Check returned bit lengths
        assertNotNull(inputA);
        assertTrue(inputA.bitLength() < 1024);

        assertNotNull(inputB);
        assertTrue(inputB.bitLength() < 2048);

        assertNotNull(inputC);
        assertTrue(inputC.bitLength() < 2048);

        assertNotNull(inputD);
        assertTrue(inputD.bitLength() < 4096);

        // Check padding is correct
        BigInteger outputA = new BigInteger("21430172143725346418968500981200036211228096234110672148875007767407021022498722449863967576313917162551893458351062936503742905713846280871969155149397149607869135549648461970673043326260653351546770374188797289954271605820276243863796611472737526599616137731782411399800403005392583488131803526808986",10);
        BigInteger outputB = new BigInteger("3852487334169269478406295381625885005050194581713138107315343073311406986578451501512193848076214011155214066615330936848416275876819005143056887672716174497679576559937119018048071593092638505315310673521049924883460070925071210403661500732717057522604661685471094255791613565867074228359169053926936433973540584253033201983056661461182185351235410694518842942485547740379694246376569308537275623424551143255942297425086719674777788061177926767397367669729386238006010733212330366340129201263988251225976647134262899234664031149478801485355599554950890272414959593138975158362300560517526066006297988129510507", 10);
        BigInteger outputC = new BigInteger("3852487334169269478406295381625885005050194581713138107315343073311406986578451501512193848076214011155214066615330936848416275876819005143056887672716174497679576559937119018048071593092638505315310673521049924883460070925071210403661500732717057522604661685471094255791613565867074228359169053926936433973540584253033201983056661461182185351235410694518842942485547740379694246376569308537275623424551143255942297425086719674777788061177926767397367669729386238006010733212330366340129201263988251225976647134262899234664031149478849593303000150507091561526694701832935433610077344209439406729359709558782118",10);
        BigInteger outputD = new BigInteger("124500856567997039162129486884668395826812296992228481815365968142027128693051035028556205264925665657626403178505809645412871055386757088573364745122357043975109693592036962311310957686231579579642781020624154356286086897778238385399858317893098189532376278484559500702772623150362802638348099921178582788310878154859755967372286990903647058081576759032347615874174439483053568007465887053932454054557542271600400386609821070961296169053055271224915561091922407311082889683446299274961215323332902442010587545631362959076396586324429133634232055167395681288399516683383956617143869197417777155025314769088291480186439336051135732033936004087935401036990026744627678180016656996927023729705272326460079719945226356402013780463595287258622978986906959003423961532930270921061548338446592277866576070108835043557312878258394587753736138596887993298504695766978337288786524018635728722878890320915557899639681702363838688960875075203948108011233803260538752766069558125766188271033739566336965497637006595709051901086265523344299594053086414269586271143861797076055019661581144918539466895753979973903490959681412953819165526482094047068360689666253035093424702185500684978935288942367567426698358987420540093098312747941897928858",10);

        assertEquals(0, inputA.compareTo(outputA));
        assertEquals(0, inputB.compareTo(outputB));
        assertEquals(0, inputC.compareTo(outputC));
        assertEquals(0, inputD.compareTo(outputD));
    }
}
